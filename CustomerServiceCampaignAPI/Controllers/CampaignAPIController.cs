using CustomerServiceCampaignAPI.Data;
using CustomerServiceCampaignAPI.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace CustomerServiceCampaignAPI.Controllers
{
    [Route("api/campaignAPI")]
    [ApiController]
    public class CampaignAPIController : ControllerBase
    {
        private readonly ApplicationDbContext _db;

        public CampaignAPIController(ApplicationDbContext db)
        {
            _db = db;
        }

        [HttpGet]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<IEnumerable<Campaign>> GetCampaigns()
        {
            return Ok(_db.Campaigns.ToList());
        }

        [HttpGet("{id:int}", Name = "GetCampaign")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<Campaign> GetCampaign(int id)
        {
            if (id == 0)
            {
                ModelState.AddModelError("CustomError", "Id cannot be 0!");
                return BadRequest(ModelState);
            }

            var campaign = _db.Campaigns.FirstOrDefault(u => u.Id == id);

            if (campaign == null)
            {
                return NotFound();
            }

            return Ok(campaign);
        }

        [HttpPost]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [Route("/startCampaign")]
        public ActionResult<Campaign> CreateCampaign([FromBody] Campaign campaign)
        {
            //Check if campaign object passed throw request is not null
            if (campaign == null)
            {
                ModelState.AddModelError("CustomError", "Campaign is not passed!");
                return BadRequest(ModelState);
            }
            //Id is autogenerated, but in case it is passed it should be 0
            if (campaign.Id > 0)
            {
                ModelState.AddModelError("CustomError", "Campaign Id is autogenerated!");
                return BadRequest(ModelState);
            }

            Campaign model = new()
            {
                Company = campaign.Company,
                CampaignName = campaign.CampaignName,
                StartDate = campaign.StartDate,
                //Calculate EndDate - campaign lasts for one week including Start and End Date
                EndDate = campaign.StartDate.AddDays(6)
            };

            _db.Campaigns.Add(model);
            _db.SaveChanges();

            return CreatedAtAction(nameof(CreateCampaign), model);
        }

        [HttpDelete("{id:int}", Name = "DeleteCampaign")]
        [Authorize]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        public IActionResult DeleteCampaign(int id)
        {
            if (id == 0)
            {
                ModelState.AddModelError("CustomError", "Id cannot be 0!");
                return BadRequest(ModelState);
            }
            var campaign = _db.Campaigns.FirstOrDefault(a => a.Id == id);
            if (campaign == null)
            {
                return NotFound();
            }

            _db.Campaigns.Remove(campaign);
            _db.SaveChanges();
            return NoContent();
        }
    }
}
